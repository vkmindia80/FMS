{"ast":null,"code":"import l, { createContext as A, Fragment as H, useContext as F, useEffect as M, useMemo as P, useRef as U, useState as I } from \"react\";\nimport { useControllable as K } from '../../hooks/use-controllable.js';\nimport { useDisposables as B } from '../../hooks/use-disposables.js';\nimport { useEvent as h } from '../../hooks/use-event.js';\nimport { useId as O } from '../../hooks/use-id.js';\nimport { useResolveButtonType as W } from '../../hooks/use-resolve-button-type.js';\nimport { useSyncRefs as N } from '../../hooks/use-sync-refs.js';\nimport { Features as J, Hidden as X } from '../../internal/hidden.js';\nimport { isDisabledReactIssue7711 as j } from '../../utils/bugs.js';\nimport { attemptSubmit as $ } from '../../utils/form.js';\nimport { compact as q, forwardRefWithAs as z, render as g } from '../../utils/render.js';\nimport { Description as Q, useDescriptions as V } from '../description/description.js';\nimport { Keys as D } from '../keyboard.js';\nimport { Label as Y, useLabels as Z } from '../label/label.js';\nlet S = A(null);\nS.displayName = \"GroupContext\";\nlet ee = H;\nfunction te(r) {\n  var u;\n  let [n, p] = I(null),\n    [c, T] = Z(),\n    [o, b] = V(),\n    a = P(() => ({\n      switch: n,\n      setSwitch: p,\n      labelledby: c,\n      describedby: o\n    }), [n, p, c, o]),\n    d = {},\n    y = r;\n  return l.createElement(b, {\n    name: \"Switch.Description\"\n  }, l.createElement(T, {\n    name: \"Switch.Label\",\n    props: {\n      htmlFor: (u = a.switch) == null ? void 0 : u.id,\n      onClick(m) {\n        n && (m.currentTarget.tagName === \"LABEL\" && m.preventDefault(), n.click(), n.focus({\n          preventScroll: !0\n        }));\n      }\n    }\n  }, l.createElement(S.Provider, {\n    value: a\n  }, g({\n    ourProps: d,\n    theirProps: y,\n    defaultTag: ee,\n    name: \"Switch.Group\"\n  }))));\n}\nlet ne = \"button\";\nfunction re(r, n) {\n  var E;\n  let p = O(),\n    {\n      id: c = `headlessui-switch-${p}`,\n      checked: T,\n      defaultChecked: o = !1,\n      onChange: b,\n      disabled: a = !1,\n      name: d,\n      value: y,\n      form: u,\n      ...m\n    } = r,\n    t = F(S),\n    f = U(null),\n    C = N(f, n, t === null ? null : t.setSwitch),\n    [i, s] = K(T, b, o),\n    w = h(() => s == null ? void 0 : s(!i)),\n    L = h(e => {\n      if (j(e.currentTarget)) return e.preventDefault();\n      e.preventDefault(), w();\n    }),\n    x = h(e => {\n      e.key === D.Space ? (e.preventDefault(), w()) : e.key === D.Enter && $(e.currentTarget);\n    }),\n    v = h(e => e.preventDefault()),\n    G = P(() => ({\n      checked: i\n    }), [i]),\n    R = {\n      id: c,\n      ref: C,\n      role: \"switch\",\n      type: W(r, f),\n      tabIndex: r.tabIndex === -1 ? 0 : (E = r.tabIndex) != null ? E : 0,\n      \"aria-checked\": i,\n      \"aria-labelledby\": t == null ? void 0 : t.labelledby,\n      \"aria-describedby\": t == null ? void 0 : t.describedby,\n      disabled: a,\n      onClick: L,\n      onKeyUp: x,\n      onKeyPress: v\n    },\n    k = B();\n  return M(() => {\n    var _;\n    let e = (_ = f.current) == null ? void 0 : _.closest(\"form\");\n    e && o !== void 0 && k.addEventListener(e, \"reset\", () => {\n      s(o);\n    });\n  }, [f, s]), l.createElement(l.Fragment, null, d != null && i && l.createElement(X, {\n    features: J.Hidden,\n    ...q({\n      as: \"input\",\n      type: \"checkbox\",\n      hidden: !0,\n      readOnly: !0,\n      disabled: a,\n      form: u,\n      checked: i,\n      name: d,\n      value: y\n    })\n  }), g({\n    ourProps: R,\n    theirProps: m,\n    slot: G,\n    defaultTag: ne,\n    name: \"Switch\"\n  }));\n}\nlet oe = z(re),\n  ie = te,\n  _e = Object.assign(oe, {\n    Group: ie,\n    Label: Y,\n    Description: Q\n  });\nexport { _e as Switch };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}