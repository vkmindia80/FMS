{"ast":null,"code":"import _objectSpread from\"/app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect}from'react';import{authAPI}from'../services/api';import toast from'react-hot-toast';// Initial state\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={user:null,loading:true,error:null,isAuthenticated:false};// Action types\nconst ActionTypes={LOGIN_START:'LOGIN_START',LOGIN_SUCCESS:'LOGIN_SUCCESS',LOGIN_FAILURE:'LOGIN_FAILURE',LOGOUT:'LOGOUT',SET_LOADING:'SET_LOADING',CLEAR_ERROR:'CLEAR_ERROR',UPDATE_USER:'UPDATE_USER'};// Reducer\nconst authReducer=(state,action)=>{switch(action.type){case ActionTypes.LOGIN_START:return _objectSpread(_objectSpread({},state),{},{loading:true,error:null});case ActionTypes.LOGIN_SUCCESS:return _objectSpread(_objectSpread({},state),{},{loading:false,user:action.payload.user,isAuthenticated:true,error:null});case ActionTypes.LOGIN_FAILURE:return _objectSpread(_objectSpread({},state),{},{loading:false,user:null,isAuthenticated:false,error:action.payload});case ActionTypes.LOGOUT:return _objectSpread(_objectSpread({},state),{},{user:null,isAuthenticated:false,loading:false,error:null});case ActionTypes.SET_LOADING:return _objectSpread(_objectSpread({},state),{},{loading:action.payload});case ActionTypes.CLEAR_ERROR:return _objectSpread(_objectSpread({},state),{},{error:null});case ActionTypes.UPDATE_USER:return _objectSpread(_objectSpread({},state),{},{user:_objectSpread(_objectSpread({},state.user),action.payload)});default:return state;}};// Create context\nconst AuthContext=/*#__PURE__*/createContext();// Custom hook to use auth context\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};// Token management\nconst TOKEN_KEY='afms_access_token';const REFRESH_TOKEN_KEY='afms_refresh_token';const USER_KEY='afms_user';const getStoredTokens=()=>{return{accessToken:localStorage.getItem(TOKEN_KEY),refreshToken:localStorage.getItem(REFRESH_TOKEN_KEY),user:JSON.parse(localStorage.getItem(USER_KEY)||'null')};};const setStoredTokens=(accessToken,refreshToken,user)=>{if(accessToken)localStorage.setItem(TOKEN_KEY,accessToken);if(refreshToken)localStorage.setItem(REFRESH_TOKEN_KEY,refreshToken);if(user)localStorage.setItem(USER_KEY,JSON.stringify(user));};const clearStoredTokens=()=>{localStorage.removeItem(TOKEN_KEY);localStorage.removeItem(REFRESH_TOKEN_KEY);localStorage.removeItem(USER_KEY);};// Auth Provider Component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(authReducer,initialState);// Initialize auth state from localStorage\nuseEffect(()=>{const initializeAuth=async()=>{dispatch({type:ActionTypes.SET_LOADING,payload:true});try{const{accessToken,refreshToken,user}=getStoredTokens();if(accessToken&&refreshToken&&user){// Verify token is still valid by fetching user info\ntry{const currentUser=await authAPI.getCurrentUser();dispatch({type:ActionTypes.LOGIN_SUCCESS,payload:{user:currentUser}});}catch(error){// Token might be expired, try to refresh\ntry{const refreshResponse=await authAPI.refreshToken(refreshToken);setStoredTokens(refreshResponse.access_token,refreshToken,user);const currentUser=await authAPI.getCurrentUser();dispatch({type:ActionTypes.LOGIN_SUCCESS,payload:{user:currentUser}});}catch(refreshError){// Refresh failed, clear tokens and logout\nclearStoredTokens();dispatch({type:ActionTypes.LOGOUT});}}}else{dispatch({type:ActionTypes.SET_LOADING,payload:false});}}catch(error){console.error('Auth initialization error:',error);clearStoredTokens();dispatch({type:ActionTypes.SET_LOADING,payload:false});}};initializeAuth();},[]);// Login function\nconst login=async(email,password)=>{dispatch({type:ActionTypes.LOGIN_START});try{const response=await authAPI.login(email,password);setStoredTokens(response.access_token,response.refresh_token,response.user);dispatch({type:ActionTypes.LOGIN_SUCCESS,payload:{user:response.user}});toast.success('Login successful!');return{success:true};}catch(error){var _error$response,_error$response$data;const errorMessage=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||'Login failed';dispatch({type:ActionTypes.LOGIN_FAILURE,payload:errorMessage});toast.error(errorMessage);return{success:false,error:errorMessage};}};// Register function\nconst register=async userData=>{dispatch({type:ActionTypes.LOGIN_START});try{const response=await authAPI.register(userData);setStoredTokens(response.access_token,response.refresh_token,response.user);dispatch({type:ActionTypes.LOGIN_SUCCESS,payload:{user:response.user}});toast.success('Registration successful!');return{success:true};}catch(error){var _error$response2,_error$response2$data;const errorMessage=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.detail)||'Registration failed';dispatch({type:ActionTypes.LOGIN_FAILURE,payload:errorMessage});toast.error(errorMessage);return{success:false,error:errorMessage};}};// Logout function\nconst logout=async()=>{try{await authAPI.logout();}catch(error){console.error('Logout API error:',error);}finally{clearStoredTokens();dispatch({type:ActionTypes.LOGOUT});toast.success('Logged out successfully');}};// Update user function\nconst updateUser=userData=>{const updatedUser=_objectSpread(_objectSpread({},state.user),userData);localStorage.setItem(USER_KEY,JSON.stringify(updatedUser));dispatch({type:ActionTypes.UPDATE_USER,payload:userData});};// Clear error function\nconst clearError=()=>{dispatch({type:ActionTypes.CLEAR_ERROR});};// Refresh token function\nconst refreshToken=async()=>{try{const{refreshToken:storedRefreshToken}=getStoredTokens();if(!storedRefreshToken){throw new Error('No refresh token available');}const response=await authAPI.refreshToken(storedRefreshToken);setStoredTokens(response.access_token,storedRefreshToken,state.user);return response.access_token;}catch(error){console.error('Token refresh failed:',error);logout();throw error;}};// Get current access token\nconst getAccessToken=()=>{return localStorage.getItem(TOKEN_KEY);};// Check if user has specific role\nconst hasRole=role=>{var _state$user;return((_state$user=state.user)===null||_state$user===void 0?void 0:_state$user.role)===role;};// Check if user has any of the specified roles\nconst hasAnyRole=roles=>{var _state$user2;return roles.includes((_state$user2=state.user)===null||_state$user2===void 0?void 0:_state$user2.role);};// Context value\nconst value={// State\nuser:state.user,loading:state.loading,error:state.error,isAuthenticated:state.isAuthenticated,// Actions\nlogin,register,logout,updateUser,clearError,refreshToken,getAccessToken,// Utilities\nhasRole,hasAnyRole};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","toast","jsx","_jsx","initialState","user","loading","error","isAuthenticated","ActionTypes","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","SET_LOADING","CLEAR_ERROR","UPDATE_USER","authReducer","state","action","type","_objectSpread","payload","AuthContext","useAuth","context","Error","TOKEN_KEY","REFRESH_TOKEN_KEY","USER_KEY","getStoredTokens","accessToken","localStorage","getItem","refreshToken","JSON","parse","setStoredTokens","setItem","stringify","clearStoredTokens","removeItem","AuthProvider","_ref","children","dispatch","initializeAuth","currentUser","getCurrentUser","refreshResponse","access_token","refreshError","console","login","email","password","response","refresh_token","success","_error$response","_error$response$data","errorMessage","data","detail","register","userData","_error$response2","_error$response2$data","logout","updateUser","updatedUser","clearError","storedRefreshToken","getAccessToken","hasRole","role","_state$user","hasAnyRole","roles","_state$user2","includes","value","Provider"],"sources":["/app/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\n\n// Initial state\nconst initialState = {\n  user: null,\n  loading: true,\n  error: null,\n  isAuthenticated: false,\n};\n\n// Action types\nconst ActionTypes = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  LOGOUT: 'LOGOUT',\n  SET_LOADING: 'SET_LOADING',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER',\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.LOGIN_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case ActionTypes.LOGIN_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        user: action.payload.user,\n        isAuthenticated: true,\n        error: null,\n      };\n    case ActionTypes.LOGIN_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        user: null,\n        isAuthenticated: false,\n        error: action.payload,\n      };\n    case ActionTypes.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        loading: false,\n        error: null,\n      };\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    case ActionTypes.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null,\n      };\n    case ActionTypes.UPDATE_USER:\n      return {\n        ...state,\n        user: { ...state.user, ...action.payload },\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = createContext();\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Token management\nconst TOKEN_KEY = 'afms_access_token';\nconst REFRESH_TOKEN_KEY = 'afms_refresh_token';\nconst USER_KEY = 'afms_user';\n\nconst getStoredTokens = () => {\n  return {\n    accessToken: localStorage.getItem(TOKEN_KEY),\n    refreshToken: localStorage.getItem(REFRESH_TOKEN_KEY),\n    user: JSON.parse(localStorage.getItem(USER_KEY) || 'null'),\n  };\n};\n\nconst setStoredTokens = (accessToken, refreshToken, user) => {\n  if (accessToken) localStorage.setItem(TOKEN_KEY, accessToken);\n  if (refreshToken) localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n  if (user) localStorage.setItem(USER_KEY, JSON.stringify(user));\n};\n\nconst clearStoredTokens = () => {\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(REFRESH_TOKEN_KEY);\n  localStorage.removeItem(USER_KEY);\n};\n\n// Auth Provider Component\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const initializeAuth = async () => {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n\n      try {\n        const { accessToken, refreshToken, user } = getStoredTokens();\n\n        if (accessToken && refreshToken && user) {\n          // Verify token is still valid by fetching user info\n          try {\n            const currentUser = await authAPI.getCurrentUser();\n            dispatch({\n              type: ActionTypes.LOGIN_SUCCESS,\n              payload: { user: currentUser },\n            });\n          } catch (error) {\n            // Token might be expired, try to refresh\n            try {\n              const refreshResponse = await authAPI.refreshToken(refreshToken);\n              setStoredTokens(refreshResponse.access_token, refreshToken, user);\n              \n              const currentUser = await authAPI.getCurrentUser();\n              dispatch({\n                type: ActionTypes.LOGIN_SUCCESS,\n                payload: { user: currentUser },\n              });\n            } catch (refreshError) {\n              // Refresh failed, clear tokens and logout\n              clearStoredTokens();\n              dispatch({ type: ActionTypes.LOGOUT });\n            }\n          }\n        } else {\n          dispatch({ type: ActionTypes.SET_LOADING, payload: false });\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        clearStoredTokens();\n        dispatch({ type: ActionTypes.SET_LOADING, payload: false });\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    dispatch({ type: ActionTypes.LOGIN_START });\n\n    try {\n      const response = await authAPI.login(email, password);\n      \n      setStoredTokens(\n        response.access_token,\n        response.refresh_token,\n        response.user\n      );\n\n      dispatch({\n        type: ActionTypes.LOGIN_SUCCESS,\n        payload: { user: response.user },\n      });\n\n      toast.success('Login successful!');\n      return { success: true };\n    } catch (error) {\n      const errorMessage = error.response?.data?.detail || 'Login failed';\n      dispatch({\n        type: ActionTypes.LOGIN_FAILURE,\n        payload: errorMessage,\n      });\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    dispatch({ type: ActionTypes.LOGIN_START });\n\n    try {\n      const response = await authAPI.register(userData);\n      \n      setStoredTokens(\n        response.access_token,\n        response.refresh_token,\n        response.user\n      );\n\n      dispatch({\n        type: ActionTypes.LOGIN_SUCCESS,\n        payload: { user: response.user },\n      });\n\n      toast.success('Registration successful!');\n      return { success: true };\n    } catch (error) {\n      const errorMessage = error.response?.data?.detail || 'Registration failed';\n      dispatch({\n        type: ActionTypes.LOGIN_FAILURE,\n        payload: errorMessage,\n      });\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      console.error('Logout API error:', error);\n    } finally {\n      clearStoredTokens();\n      dispatch({ type: ActionTypes.LOGOUT });\n      toast.success('Logged out successfully');\n    }\n  };\n\n  // Update user function\n  const updateUser = (userData) => {\n    const updatedUser = { ...state.user, ...userData };\n    localStorage.setItem(USER_KEY, JSON.stringify(updatedUser));\n    dispatch({\n      type: ActionTypes.UPDATE_USER,\n      payload: userData,\n    });\n  };\n\n  // Clear error function\n  const clearError = () => {\n    dispatch({ type: ActionTypes.CLEAR_ERROR });\n  };\n\n  // Refresh token function\n  const refreshToken = async () => {\n    try {\n      const { refreshToken: storedRefreshToken } = getStoredTokens();\n      if (!storedRefreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      const response = await authAPI.refreshToken(storedRefreshToken);\n      setStoredTokens(response.access_token, storedRefreshToken, state.user);\n      \n      return response.access_token;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      logout();\n      throw error;\n    }\n  };\n\n  // Get current access token\n  const getAccessToken = () => {\n    return localStorage.getItem(TOKEN_KEY);\n  };\n\n  // Check if user has specific role\n  const hasRole = (role) => {\n    return state.user?.role === role;\n  };\n\n  // Check if user has any of the specified roles\n  const hasAnyRole = (roles) => {\n    return roles.includes(state.user?.role);\n  };\n\n  // Context value\n  const value = {\n    // State\n    user: state.user,\n    loading: state.loading,\n    error: state.error,\n    isAuthenticated: state.isAuthenticated,\n\n    // Actions\n    login,\n    register,\n    logout,\n    updateUser,\n    clearError,\n    refreshToken,\n    getAccessToken,\n\n    // Utilities\n    hasRole,\n    hasAnyRole,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};"],"mappings":"kGAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAC/E,OAASC,OAAO,KAAQ,iBAAiB,CACzC,MAAO,CAAAC,KAAK,KAAM,iBAAiB,CAEnC;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,YAAY,CAAG,CACnBC,IAAI,CAAE,IAAI,CACVC,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,IAAI,CACXC,eAAe,CAAE,KACnB,CAAC,CAED;AACA,KAAM,CAAAC,WAAW,CAAG,CAClBC,WAAW,CAAE,aAAa,CAC1BC,aAAa,CAAE,eAAe,CAC9BC,aAAa,CAAE,eAAe,CAC9BC,MAAM,CAAE,QAAQ,CAChBC,WAAW,CAAE,aAAa,CAC1BC,WAAW,CAAE,aAAa,CAC1BC,WAAW,CAAE,aACf,CAAC,CAED;AACA,KAAM,CAAAC,WAAW,CAAGA,CAACC,KAAK,CAAEC,MAAM,GAAK,CACrC,OAAQA,MAAM,CAACC,IAAI,EACjB,IAAK,CAAAX,WAAW,CAACC,WAAW,CAC1B,OAAAW,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRZ,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,IAAI,GAEf,IAAK,CAAAE,WAAW,CAACE,aAAa,CAC5B,OAAAU,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRZ,OAAO,CAAE,KAAK,CACdD,IAAI,CAAEc,MAAM,CAACG,OAAO,CAACjB,IAAI,CACzBG,eAAe,CAAE,IAAI,CACrBD,KAAK,CAAE,IAAI,GAEf,IAAK,CAAAE,WAAW,CAACG,aAAa,CAC5B,OAAAS,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRZ,OAAO,CAAE,KAAK,CACdD,IAAI,CAAE,IAAI,CACVG,eAAe,CAAE,KAAK,CACtBD,KAAK,CAAEY,MAAM,CAACG,OAAO,GAEzB,IAAK,CAAAb,WAAW,CAACI,MAAM,CACrB,OAAAQ,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRb,IAAI,CAAE,IAAI,CACVG,eAAe,CAAE,KAAK,CACtBF,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IAAI,GAEf,IAAK,CAAAE,WAAW,CAACK,WAAW,CAC1B,OAAAO,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRZ,OAAO,CAAEa,MAAM,CAACG,OAAO,GAE3B,IAAK,CAAAb,WAAW,CAACM,WAAW,CAC1B,OAAAM,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRX,KAAK,CAAE,IAAI,GAEf,IAAK,CAAAE,WAAW,CAACO,WAAW,CAC1B,OAAAK,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRb,IAAI,CAAAgB,aAAA,CAAAA,aAAA,IAAOH,KAAK,CAACb,IAAI,EAAKc,MAAM,CAACG,OAAO,CAAE,GAE9C,QACE,MAAO,CAAAJ,KAAK,CAChB,CACF,CAAC,CAED;AACA,KAAM,CAAAK,WAAW,cAAG3B,aAAa,CAAC,CAAC,CAEnC;AACA,MAAO,MAAM,CAAA4B,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAG5B,UAAU,CAAC0B,WAAW,CAAC,CACvC,GAAI,CAACE,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED;AACA,KAAM,CAAAE,SAAS,CAAG,mBAAmB,CACrC,KAAM,CAAAC,iBAAiB,CAAG,oBAAoB,CAC9C,KAAM,CAAAC,QAAQ,CAAG,WAAW,CAE5B,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5B,MAAO,CACLC,WAAW,CAAEC,YAAY,CAACC,OAAO,CAACN,SAAS,CAAC,CAC5CO,YAAY,CAAEF,YAAY,CAACC,OAAO,CAACL,iBAAiB,CAAC,CACrDvB,IAAI,CAAE8B,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAACJ,QAAQ,CAAC,EAAI,MAAM,CAC3D,CAAC,CACH,CAAC,CAED,KAAM,CAAAQ,eAAe,CAAGA,CAACN,WAAW,CAAEG,YAAY,CAAE7B,IAAI,GAAK,CAC3D,GAAI0B,WAAW,CAAEC,YAAY,CAACM,OAAO,CAACX,SAAS,CAAEI,WAAW,CAAC,CAC7D,GAAIG,YAAY,CAAEF,YAAY,CAACM,OAAO,CAACV,iBAAiB,CAAEM,YAAY,CAAC,CACvE,GAAI7B,IAAI,CAAE2B,YAAY,CAACM,OAAO,CAACT,QAAQ,CAAEM,IAAI,CAACI,SAAS,CAAClC,IAAI,CAAC,CAAC,CAChE,CAAC,CAED,KAAM,CAAAmC,iBAAiB,CAAGA,CAAA,GAAM,CAC9BR,YAAY,CAACS,UAAU,CAACd,SAAS,CAAC,CAClCK,YAAY,CAACS,UAAU,CAACb,iBAAiB,CAAC,CAC1CI,YAAY,CAACS,UAAU,CAACZ,QAAQ,CAAC,CACnC,CAAC,CAED;AACA,MAAO,MAAM,CAAAa,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACzB,KAAK,CAAE2B,QAAQ,CAAC,CAAG/C,UAAU,CAACmB,WAAW,CAAEb,YAAY,CAAC,CAE/D;AACAL,SAAS,CAAC,IAAM,CACd,KAAM,CAAA+C,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjCD,QAAQ,CAAC,CAAEzB,IAAI,CAAEX,WAAW,CAACK,WAAW,CAAEQ,OAAO,CAAE,IAAK,CAAC,CAAC,CAE1D,GAAI,CACF,KAAM,CAAES,WAAW,CAAEG,YAAY,CAAE7B,IAAK,CAAC,CAAGyB,eAAe,CAAC,CAAC,CAE7D,GAAIC,WAAW,EAAIG,YAAY,EAAI7B,IAAI,CAAE,CACvC;AACA,GAAI,CACF,KAAM,CAAA0C,WAAW,CAAG,KAAM,CAAA/C,OAAO,CAACgD,cAAc,CAAC,CAAC,CAClDH,QAAQ,CAAC,CACPzB,IAAI,CAAEX,WAAW,CAACE,aAAa,CAC/BW,OAAO,CAAE,CAAEjB,IAAI,CAAE0C,WAAY,CAC/B,CAAC,CAAC,CACJ,CAAE,MAAOxC,KAAK,CAAE,CACd;AACA,GAAI,CACF,KAAM,CAAA0C,eAAe,CAAG,KAAM,CAAAjD,OAAO,CAACkC,YAAY,CAACA,YAAY,CAAC,CAChEG,eAAe,CAACY,eAAe,CAACC,YAAY,CAAEhB,YAAY,CAAE7B,IAAI,CAAC,CAEjE,KAAM,CAAA0C,WAAW,CAAG,KAAM,CAAA/C,OAAO,CAACgD,cAAc,CAAC,CAAC,CAClDH,QAAQ,CAAC,CACPzB,IAAI,CAAEX,WAAW,CAACE,aAAa,CAC/BW,OAAO,CAAE,CAAEjB,IAAI,CAAE0C,WAAY,CAC/B,CAAC,CAAC,CACJ,CAAE,MAAOI,YAAY,CAAE,CACrB;AACAX,iBAAiB,CAAC,CAAC,CACnBK,QAAQ,CAAC,CAAEzB,IAAI,CAAEX,WAAW,CAACI,MAAO,CAAC,CAAC,CACxC,CACF,CACF,CAAC,IAAM,CACLgC,QAAQ,CAAC,CAAEzB,IAAI,CAAEX,WAAW,CAACK,WAAW,CAAEQ,OAAO,CAAE,KAAM,CAAC,CAAC,CAC7D,CACF,CAAE,MAAOf,KAAK,CAAE,CACd6C,OAAO,CAAC7C,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClDiC,iBAAiB,CAAC,CAAC,CACnBK,QAAQ,CAAC,CAAEzB,IAAI,CAAEX,WAAW,CAACK,WAAW,CAAEQ,OAAO,CAAE,KAAM,CAAC,CAAC,CAC7D,CACF,CAAC,CAEDwB,cAAc,CAAC,CAAC,CAClB,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAO,KAAK,CAAG,KAAAA,CAAOC,KAAK,CAAEC,QAAQ,GAAK,CACvCV,QAAQ,CAAC,CAAEzB,IAAI,CAAEX,WAAW,CAACC,WAAY,CAAC,CAAC,CAE3C,GAAI,CACF,KAAM,CAAA8C,QAAQ,CAAG,KAAM,CAAAxD,OAAO,CAACqD,KAAK,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAErDlB,eAAe,CACbmB,QAAQ,CAACN,YAAY,CACrBM,QAAQ,CAACC,aAAa,CACtBD,QAAQ,CAACnD,IACX,CAAC,CAEDwC,QAAQ,CAAC,CACPzB,IAAI,CAAEX,WAAW,CAACE,aAAa,CAC/BW,OAAO,CAAE,CAAEjB,IAAI,CAAEmD,QAAQ,CAACnD,IAAK,CACjC,CAAC,CAAC,CAEFJ,KAAK,CAACyD,OAAO,CAAC,mBAAmB,CAAC,CAClC,MAAO,CAAEA,OAAO,CAAE,IAAK,CAAC,CAC1B,CAAE,MAAOnD,KAAK,CAAE,KAAAoD,eAAA,CAAAC,oBAAA,CACd,KAAM,CAAAC,YAAY,CAAG,EAAAF,eAAA,CAAApD,KAAK,CAACiD,QAAQ,UAAAG,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBG,IAAI,UAAAF,oBAAA,iBAApBA,oBAAA,CAAsBG,MAAM,GAAI,cAAc,CACnElB,QAAQ,CAAC,CACPzB,IAAI,CAAEX,WAAW,CAACG,aAAa,CAC/BU,OAAO,CAAEuC,YACX,CAAC,CAAC,CACF5D,KAAK,CAACM,KAAK,CAACsD,YAAY,CAAC,CACzB,MAAO,CAAEH,OAAO,CAAE,KAAK,CAAEnD,KAAK,CAAEsD,YAAa,CAAC,CAChD,CACF,CAAC,CAED;AACA,KAAM,CAAAG,QAAQ,CAAG,KAAO,CAAAC,QAAQ,EAAK,CACnCpB,QAAQ,CAAC,CAAEzB,IAAI,CAAEX,WAAW,CAACC,WAAY,CAAC,CAAC,CAE3C,GAAI,CACF,KAAM,CAAA8C,QAAQ,CAAG,KAAM,CAAAxD,OAAO,CAACgE,QAAQ,CAACC,QAAQ,CAAC,CAEjD5B,eAAe,CACbmB,QAAQ,CAACN,YAAY,CACrBM,QAAQ,CAACC,aAAa,CACtBD,QAAQ,CAACnD,IACX,CAAC,CAEDwC,QAAQ,CAAC,CACPzB,IAAI,CAAEX,WAAW,CAACE,aAAa,CAC/BW,OAAO,CAAE,CAAEjB,IAAI,CAAEmD,QAAQ,CAACnD,IAAK,CACjC,CAAC,CAAC,CAEFJ,KAAK,CAACyD,OAAO,CAAC,0BAA0B,CAAC,CACzC,MAAO,CAAEA,OAAO,CAAE,IAAK,CAAC,CAC1B,CAAE,MAAOnD,KAAK,CAAE,KAAA2D,gBAAA,CAAAC,qBAAA,CACd,KAAM,CAAAN,YAAY,CAAG,EAAAK,gBAAA,CAAA3D,KAAK,CAACiD,QAAQ,UAAAU,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBJ,IAAI,UAAAK,qBAAA,iBAApBA,qBAAA,CAAsBJ,MAAM,GAAI,qBAAqB,CAC1ElB,QAAQ,CAAC,CACPzB,IAAI,CAAEX,WAAW,CAACG,aAAa,CAC/BU,OAAO,CAAEuC,YACX,CAAC,CAAC,CACF5D,KAAK,CAACM,KAAK,CAACsD,YAAY,CAAC,CACzB,MAAO,CAAEH,OAAO,CAAE,KAAK,CAAEnD,KAAK,CAAEsD,YAAa,CAAC,CAChD,CACF,CAAC,CAED;AACA,KAAM,CAAAO,MAAM,CAAG,KAAAA,CAAA,GAAY,CACzB,GAAI,CACF,KAAM,CAAApE,OAAO,CAACoE,MAAM,CAAC,CAAC,CACxB,CAAE,MAAO7D,KAAK,CAAE,CACd6C,OAAO,CAAC7C,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CAC3C,CAAC,OAAS,CACRiC,iBAAiB,CAAC,CAAC,CACnBK,QAAQ,CAAC,CAAEzB,IAAI,CAAEX,WAAW,CAACI,MAAO,CAAC,CAAC,CACtCZ,KAAK,CAACyD,OAAO,CAAC,yBAAyB,CAAC,CAC1C,CACF,CAAC,CAED;AACA,KAAM,CAAAW,UAAU,CAAIJ,QAAQ,EAAK,CAC/B,KAAM,CAAAK,WAAW,CAAAjD,aAAA,CAAAA,aAAA,IAAQH,KAAK,CAACb,IAAI,EAAK4D,QAAQ,CAAE,CAClDjC,YAAY,CAACM,OAAO,CAACT,QAAQ,CAAEM,IAAI,CAACI,SAAS,CAAC+B,WAAW,CAAC,CAAC,CAC3DzB,QAAQ,CAAC,CACPzB,IAAI,CAAEX,WAAW,CAACO,WAAW,CAC7BM,OAAO,CAAE2C,QACX,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAM,UAAU,CAAGA,CAAA,GAAM,CACvB1B,QAAQ,CAAC,CAAEzB,IAAI,CAAEX,WAAW,CAACM,WAAY,CAAC,CAAC,CAC7C,CAAC,CAED;AACA,KAAM,CAAAmB,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CACF,KAAM,CAAEA,YAAY,CAAEsC,kBAAmB,CAAC,CAAG1C,eAAe,CAAC,CAAC,CAC9D,GAAI,CAAC0C,kBAAkB,CAAE,CACvB,KAAM,IAAI,CAAA9C,KAAK,CAAC,4BAA4B,CAAC,CAC/C,CAEA,KAAM,CAAA8B,QAAQ,CAAG,KAAM,CAAAxD,OAAO,CAACkC,YAAY,CAACsC,kBAAkB,CAAC,CAC/DnC,eAAe,CAACmB,QAAQ,CAACN,YAAY,CAAEsB,kBAAkB,CAAEtD,KAAK,CAACb,IAAI,CAAC,CAEtE,MAAO,CAAAmD,QAAQ,CAACN,YAAY,CAC9B,CAAE,MAAO3C,KAAK,CAAE,CACd6C,OAAO,CAAC7C,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C6D,MAAM,CAAC,CAAC,CACR,KAAM,CAAA7D,KAAK,CACb,CACF,CAAC,CAED;AACA,KAAM,CAAAkE,cAAc,CAAGA,CAAA,GAAM,CAC3B,MAAO,CAAAzC,YAAY,CAACC,OAAO,CAACN,SAAS,CAAC,CACxC,CAAC,CAED;AACA,KAAM,CAAA+C,OAAO,CAAIC,IAAI,EAAK,KAAAC,WAAA,CACxB,MAAO,EAAAA,WAAA,CAAA1D,KAAK,CAACb,IAAI,UAAAuE,WAAA,iBAAVA,WAAA,CAAYD,IAAI,IAAKA,IAAI,CAClC,CAAC,CAED;AACA,KAAM,CAAAE,UAAU,CAAIC,KAAK,EAAK,KAAAC,YAAA,CAC5B,MAAO,CAAAD,KAAK,CAACE,QAAQ,EAAAD,YAAA,CAAC7D,KAAK,CAACb,IAAI,UAAA0E,YAAA,iBAAVA,YAAA,CAAYJ,IAAI,CAAC,CACzC,CAAC,CAED;AACA,KAAM,CAAAM,KAAK,CAAG,CACZ;AACA5E,IAAI,CAAEa,KAAK,CAACb,IAAI,CAChBC,OAAO,CAAEY,KAAK,CAACZ,OAAO,CACtBC,KAAK,CAAEW,KAAK,CAACX,KAAK,CAClBC,eAAe,CAAEU,KAAK,CAACV,eAAe,CAEtC;AACA6C,KAAK,CACLW,QAAQ,CACRI,MAAM,CACNC,UAAU,CACVE,UAAU,CACVrC,YAAY,CACZuC,cAAc,CAEd;AACAC,OAAO,CACPG,UACF,CAAC,CAED,mBAAO1E,IAAA,CAACoB,WAAW,CAAC2D,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAArC,QAAA,CAAEA,QAAQ,CAAuB,CAAC,CAC9E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}