{"ast":null,"code":"import c, { createContext as m, useContext as L, useMemo as f, useState as b } from \"react\";\nimport { useEvent as T } from '../../hooks/use-event.js';\nimport { useId as y } from '../../hooks/use-id.js';\nimport { useIsoMorphicEffect as E } from '../../hooks/use-iso-morphic-effect.js';\nimport { useSyncRefs as g } from '../../hooks/use-sync-refs.js';\nimport { forwardRefWithAs as x, render as P } from '../../utils/render.js';\nlet d = m(null);\nfunction u() {\n  let a = L(d);\n  if (a === null) {\n    let t = new Error(\"You used a <Label /> component, but it is not inside a relevant parent.\");\n    throw Error.captureStackTrace && Error.captureStackTrace(t, u), t;\n  }\n  return a;\n}\nfunction F() {\n  let [a, t] = b([]);\n  return [a.length > 0 ? a.join(\" \") : void 0, f(() => function (e) {\n    let s = T(r => (t(l => [...l, r]), () => t(l => {\n        let n = l.slice(),\n          p = n.indexOf(r);\n        return p !== -1 && n.splice(p, 1), n;\n      }))),\n      o = f(() => ({\n        register: s,\n        slot: e.slot,\n        name: e.name,\n        props: e.props\n      }), [s, e.slot, e.name, e.props]);\n    return c.createElement(d.Provider, {\n      value: o\n    }, e.children);\n  }, [t])];\n}\nlet A = \"label\";\nfunction h(a, t) {\n  let i = y(),\n    {\n      id: e = `headlessui-label-${i}`,\n      passive: s = !1,\n      ...o\n    } = a,\n    r = u(),\n    l = g(t);\n  E(() => r.register(e), [e, r.register]);\n  let n = {\n    ref: l,\n    ...r.props,\n    id: e\n  };\n  return s && (\"onClick\" in n && (delete n.htmlFor, delete n.onClick), \"onClick\" in o && delete o.onClick), P({\n    ourProps: n,\n    theirProps: o,\n    slot: r.slot || {},\n    defaultTag: A,\n    name: r.name || \"Label\"\n  });\n}\nlet v = x(h),\n  B = Object.assign(v, {});\nexport { B as Label, F as useLabels };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}