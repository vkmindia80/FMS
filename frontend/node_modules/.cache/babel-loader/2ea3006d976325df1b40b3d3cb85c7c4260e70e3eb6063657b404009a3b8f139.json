{"ast":null,"code":"import * as r from \"react\";\nconst s = r.createContext(null);\nfunction a() {\n  return {\n    groups: new Map(),\n    get(n, t) {\n      var c;\n      let e = this.groups.get(n);\n      e || (e = new Map(), this.groups.set(n, e));\n      let l = (c = e.get(t)) != null ? c : 0;\n      e.set(t, l + 1);\n      let o = Array.from(e.keys()).indexOf(t);\n      function i() {\n        let u = e.get(t);\n        u > 1 ? e.set(t, u - 1) : e.delete(t);\n      }\n      return [o, i];\n    }\n  };\n}\nfunction C({\n  children: n\n}) {\n  let t = r.useRef(a());\n  return r.createElement(s.Provider, {\n    value: t\n  }, n);\n}\nfunction d(n) {\n  let t = r.useContext(s);\n  if (!t) throw new Error(\"You must wrap your component in a <StableCollection>\");\n  let e = f(),\n    [l, o] = t.current.get(n, e);\n  return r.useEffect(() => o, []), l;\n}\nfunction f() {\n  var l, o, i;\n  let n = (i = (o = (l = r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) == null ? void 0 : l.ReactCurrentOwner) == null ? void 0 : o.current) != null ? i : null;\n  if (!n) return Symbol();\n  let t = [],\n    e = n;\n  for (; e;) t.push(e.index), e = e.return;\n  return \"$.\" + t.join(\".\");\n}\nexport { C as StableCollection, d as useStableCollectionIndex };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}