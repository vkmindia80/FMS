{"ast":null,"code":"import { disposables as f } from '../../../utils/disposables.js';\nimport { match as d } from '../../../utils/match.js';\nimport { once as s } from '../../../utils/once.js';\nfunction g(t, ...e) {\n  t && e.length > 0 && t.classList.add(...e);\n}\nfunction v(t, ...e) {\n  t && e.length > 0 && t.classList.remove(...e);\n}\nfunction b(t, e) {\n  let n = f();\n  if (!t) return n.dispose;\n  let {\n      transitionDuration: m,\n      transitionDelay: a\n    } = getComputedStyle(t),\n    [u, p] = [m, a].map(l => {\n      let [r = 0] = l.split(\",\").filter(Boolean).map(i => i.includes(\"ms\") ? parseFloat(i) : parseFloat(i) * 1e3).sort((i, T) => T - i);\n      return r;\n    }),\n    o = u + p;\n  if (o !== 0) {\n    n.group(r => {\n      r.setTimeout(() => {\n        e(), r.dispose();\n      }, o), r.addEventListener(t, \"transitionrun\", i => {\n        i.target === i.currentTarget && r.dispose();\n      });\n    });\n    let l = n.addEventListener(t, \"transitionend\", r => {\n      r.target === r.currentTarget && (e(), l());\n    });\n  } else e();\n  return n.add(() => e()), n.dispose;\n}\nfunction M(t, e, n, m) {\n  let a = n ? \"enter\" : \"leave\",\n    u = f(),\n    p = m !== void 0 ? s(m) : () => {};\n  a === \"enter\" && (t.removeAttribute(\"hidden\"), t.style.display = \"\");\n  let o = d(a, {\n      enter: () => e.enter,\n      leave: () => e.leave\n    }),\n    l = d(a, {\n      enter: () => e.enterTo,\n      leave: () => e.leaveTo\n    }),\n    r = d(a, {\n      enter: () => e.enterFrom,\n      leave: () => e.leaveFrom\n    });\n  return v(t, ...e.base, ...e.enter, ...e.enterTo, ...e.enterFrom, ...e.leave, ...e.leaveFrom, ...e.leaveTo, ...e.entered), g(t, ...e.base, ...o, ...r), u.nextFrame(() => {\n    v(t, ...e.base, ...o, ...r), g(t, ...e.base, ...o, ...l), b(t, () => (v(t, ...e.base, ...o), g(t, ...e.base, ...e.entered), p()));\n  }), u.dispose;\n}\nexport { M as transition };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}