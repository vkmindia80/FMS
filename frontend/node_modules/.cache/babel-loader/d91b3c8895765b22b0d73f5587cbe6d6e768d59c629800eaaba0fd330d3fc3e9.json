{"ast":null,"code":"import u, { createContext as m, useContext as D, useMemo as l, useState as T } from \"react\";\nimport { useEvent as P } from '../../hooks/use-event.js';\nimport { useId as g } from '../../hooks/use-id.js';\nimport { useIsoMorphicEffect as E } from '../../hooks/use-iso-morphic-effect.js';\nimport { useSyncRefs as x } from '../../hooks/use-sync-refs.js';\nimport { forwardRefWithAs as y, render as R } from '../../utils/render.js';\nlet d = m(null);\nfunction f() {\n  let r = D(d);\n  if (r === null) {\n    let t = new Error(\"You used a <Description /> component, but it is not inside a relevant parent.\");\n    throw Error.captureStackTrace && Error.captureStackTrace(t, f), t;\n  }\n  return r;\n}\nfunction w() {\n  let [r, t] = T([]);\n  return [r.length > 0 ? r.join(\" \") : void 0, l(() => function (e) {\n    let i = P(s => (t(o => [...o, s]), () => t(o => {\n        let p = o.slice(),\n          c = p.indexOf(s);\n        return c !== -1 && p.splice(c, 1), p;\n      }))),\n      n = l(() => ({\n        register: i,\n        slot: e.slot,\n        name: e.name,\n        props: e.props\n      }), [i, e.slot, e.name, e.props]);\n    return u.createElement(d.Provider, {\n      value: n\n    }, e.children);\n  }, [t])];\n}\nlet I = \"p\";\nfunction S(r, t) {\n  let a = g(),\n    {\n      id: e = `headlessui-description-${a}`,\n      ...i\n    } = r,\n    n = f(),\n    s = x(t);\n  E(() => n.register(e), [e, n.register]);\n  let o = {\n    ref: s,\n    ...n.props,\n    id: e\n  };\n  return R({\n    ourProps: o,\n    theirProps: i,\n    slot: n.slot || {},\n    defaultTag: I,\n    name: n.name || \"Description\"\n  });\n}\nlet h = y(S),\n  G = Object.assign(h, {});\nexport { G as Description, w as useDescriptions };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}