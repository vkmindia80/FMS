{"ast":null,"code":"import { disposables as s } from '../../utils/disposables.js';\nimport { createStore as i } from '../../utils/store.js';\nimport { adjustScrollbarPadding as l } from './adjust-scrollbar-padding.js';\nimport { handleIOSLocking as d } from './handle-ios-locking.js';\nimport { preventScroll as p } from './prevent-scroll.js';\nfunction m(e) {\n  let n = {};\n  for (let t of e) Object.assign(n, t(n));\n  return n;\n}\nlet a = i(() => new Map(), {\n  PUSH(e, n) {\n    var o;\n    let t = (o = this.get(e)) != null ? o : {\n      doc: e,\n      count: 0,\n      d: s(),\n      meta: new Set()\n    };\n    return t.count++, t.meta.add(n), this.set(e, t), this;\n  },\n  POP(e, n) {\n    let t = this.get(e);\n    return t && (t.count--, t.meta.delete(n)), this;\n  },\n  SCROLL_PREVENT({\n    doc: e,\n    d: n,\n    meta: t\n  }) {\n    let o = {\n        doc: e,\n        d: n,\n        meta: m(t)\n      },\n      c = [d(), l(), p()];\n    c.forEach(({\n      before: r\n    }) => r == null ? void 0 : r(o)), c.forEach(({\n      after: r\n    }) => r == null ? void 0 : r(o));\n  },\n  SCROLL_ALLOW({\n    d: e\n  }) {\n    e.dispose();\n  },\n  TEARDOWN({\n    doc: e\n  }) {\n    this.delete(e);\n  }\n});\na.subscribe(() => {\n  let e = a.getSnapshot(),\n    n = new Map();\n  for (let [t] of e) n.set(t, t.documentElement.style.overflow);\n  for (let t of e.values()) {\n    let o = n.get(t.doc) === \"hidden\",\n      c = t.count !== 0;\n    (c && !o || !c && o) && a.dispatch(t.count > 0 ? \"SCROLL_PREVENT\" : \"SCROLL_ALLOW\", t), t.count === 0 && a.dispatch(\"TEARDOWN\", t);\n  }\n});\nexport { a as overflows };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}