{"ast":null,"code":"import { microTask as i } from './micro-task.js';\nfunction o() {\n  let n = [],\n    r = {\n      addEventListener(e, t, s, a) {\n        return e.addEventListener(t, s, a), r.add(() => e.removeEventListener(t, s, a));\n      },\n      requestAnimationFrame(...e) {\n        let t = requestAnimationFrame(...e);\n        return r.add(() => cancelAnimationFrame(t));\n      },\n      nextFrame(...e) {\n        return r.requestAnimationFrame(() => r.requestAnimationFrame(...e));\n      },\n      setTimeout(...e) {\n        let t = setTimeout(...e);\n        return r.add(() => clearTimeout(t));\n      },\n      microTask(...e) {\n        let t = {\n          current: !0\n        };\n        return i(() => {\n          t.current && e[0]();\n        }), r.add(() => {\n          t.current = !1;\n        });\n      },\n      style(e, t, s) {\n        let a = e.style.getPropertyValue(t);\n        return Object.assign(e.style, {\n          [t]: s\n        }), this.add(() => {\n          Object.assign(e.style, {\n            [t]: a\n          });\n        });\n      },\n      group(e) {\n        let t = o();\n        return e(t), this.add(() => t.dispose());\n      },\n      add(e) {\n        return n.push(e), () => {\n          let t = n.indexOf(e);\n          if (t >= 0) for (let s of n.splice(t, 1)) s();\n        };\n      },\n      dispose() {\n        for (let e of n.splice(0)) e();\n      }\n    };\n  return r;\n}\nexport { o as disposables };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}