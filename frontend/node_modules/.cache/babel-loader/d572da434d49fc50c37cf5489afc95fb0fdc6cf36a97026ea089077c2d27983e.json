{"ast":null,"code":"var i = Object.defineProperty;\nvar d = (t, e, n) => e in t ? i(t, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: n\n}) : t[e] = n;\nvar r = (t, e, n) => (d(t, typeof e != \"symbol\" ? e + \"\" : e, n), n);\nclass o {\n  constructor() {\n    r(this, \"current\", this.detect());\n    r(this, \"handoffState\", \"pending\");\n    r(this, \"currentId\", 0);\n  }\n  set(e) {\n    this.current !== e && (this.handoffState = \"pending\", this.currentId = 0, this.current = e);\n  }\n  reset() {\n    this.set(this.detect());\n  }\n  nextId() {\n    return ++this.currentId;\n  }\n  get isServer() {\n    return this.current === \"server\";\n  }\n  get isClient() {\n    return this.current === \"client\";\n  }\n  detect() {\n    return typeof window == \"undefined\" || typeof document == \"undefined\" ? \"server\" : \"client\";\n  }\n  handoff() {\n    this.handoffState === \"pending\" && (this.handoffState = \"complete\");\n  }\n  get isHandoffComplete() {\n    return this.handoffState === \"complete\";\n  }\n}\nlet s = new o();\nexport { s as env };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}