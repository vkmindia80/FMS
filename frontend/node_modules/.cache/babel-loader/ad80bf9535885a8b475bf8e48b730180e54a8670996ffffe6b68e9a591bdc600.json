{"ast":null,"code":"var _jsxFileName = \"/app/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null,\n  loading: true,\n  error: null,\n  isAuthenticated: false\n};\n\n// Action types\nconst ActionTypes = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  LOGOUT: 'LOGOUT',\n  SET_LOADING: 'SET_LOADING',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER'\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.LOGIN_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case ActionTypes.LOGIN_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        user: action.payload.user,\n        isAuthenticated: true,\n        error: null\n      };\n    case ActionTypes.LOGIN_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        user: null,\n        isAuthenticated: false,\n        error: action.payload\n      };\n    case ActionTypes.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        loading: false,\n        error: null\n      };\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case ActionTypes.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case ActionTypes.UPDATE_USER:\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Token management\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst TOKEN_KEY = 'afms_access_token';\nconst REFRESH_TOKEN_KEY = 'afms_refresh_token';\nconst USER_KEY = 'afms_user';\nconst getStoredTokens = () => {\n  return {\n    accessToken: localStorage.getItem(TOKEN_KEY),\n    refreshToken: localStorage.getItem(REFRESH_TOKEN_KEY),\n    user: JSON.parse(localStorage.getItem(USER_KEY) || 'null')\n  };\n};\nconst setStoredTokens = (accessToken, refreshToken, user) => {\n  if (accessToken) localStorage.setItem(TOKEN_KEY, accessToken);\n  if (refreshToken) localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n  if (user) localStorage.setItem(USER_KEY, JSON.stringify(user));\n};\nconst clearStoredTokens = () => {\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(REFRESH_TOKEN_KEY);\n  localStorage.removeItem(USER_KEY);\n};\n\n// Auth Provider Component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const initializeAuth = async () => {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      try {\n        const {\n          accessToken,\n          refreshToken,\n          user\n        } = getStoredTokens();\n        if (accessToken && refreshToken && user) {\n          // Verify token is still valid by fetching user info\n          try {\n            const currentUser = await authAPI.getCurrentUser();\n            dispatch({\n              type: ActionTypes.LOGIN_SUCCESS,\n              payload: {\n                user: currentUser\n              }\n            });\n          } catch (error) {\n            // Token might be expired, try to refresh\n            try {\n              const refreshResponse = await authAPI.refreshToken(refreshToken);\n              setStoredTokens(refreshResponse.access_token, refreshToken, user);\n              const currentUser = await authAPI.getCurrentUser();\n              dispatch({\n                type: ActionTypes.LOGIN_SUCCESS,\n                payload: {\n                  user: currentUser\n                }\n              });\n            } catch (refreshError) {\n              // Refresh failed, clear tokens and logout\n              clearStoredTokens();\n              dispatch({\n                type: ActionTypes.LOGOUT\n              });\n            }\n          }\n        } else {\n          dispatch({\n            type: ActionTypes.SET_LOADING,\n            payload: false\n          });\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        clearStoredTokens();\n        dispatch({\n          type: ActionTypes.SET_LOADING,\n          payload: false\n        });\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    dispatch({\n      type: ActionTypes.LOGIN_START\n    });\n    try {\n      const response = await authAPI.login(email, password);\n      setStoredTokens(response.access_token, response.refresh_token, response.user);\n      dispatch({\n        type: ActionTypes.LOGIN_SUCCESS,\n        payload: {\n          user: response.user\n        }\n      });\n      toast.success('Login successful!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Login failed';\n      dispatch({\n        type: ActionTypes.LOGIN_FAILURE,\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    dispatch({\n      type: ActionTypes.LOGIN_START\n    });\n    try {\n      const response = await authAPI.register(userData);\n      setStoredTokens(response.access_token, response.refresh_token, response.user);\n      dispatch({\n        type: ActionTypes.LOGIN_SUCCESS,\n        payload: {\n          user: response.user\n        }\n      });\n      toast.success('Registration successful!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Registration failed';\n      dispatch({\n        type: ActionTypes.LOGIN_FAILURE,\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      console.error('Logout API error:', error);\n    } finally {\n      clearStoredTokens();\n      dispatch({\n        type: ActionTypes.LOGOUT\n      });\n      toast.success('Logged out successfully');\n    }\n  };\n\n  // Update user function\n  const updateUser = userData => {\n    const updatedUser = {\n      ...state.user,\n      ...userData\n    };\n    localStorage.setItem(USER_KEY, JSON.stringify(updatedUser));\n    dispatch({\n      type: ActionTypes.UPDATE_USER,\n      payload: userData\n    });\n  };\n\n  // Clear error function\n  const clearError = () => {\n    dispatch({\n      type: ActionTypes.CLEAR_ERROR\n    });\n  };\n\n  // Refresh token function\n  const refreshToken = async () => {\n    try {\n      const {\n        refreshToken: storedRefreshToken\n      } = getStoredTokens();\n      if (!storedRefreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await authAPI.refreshToken(storedRefreshToken);\n      setStoredTokens(response.access_token, storedRefreshToken, state.user);\n      return response.access_token;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      logout();\n      throw error;\n    }\n  };\n\n  // Get current access token\n  const getAccessToken = () => {\n    return localStorage.getItem(TOKEN_KEY);\n  };\n\n  // Check if user has specific role\n  const hasRole = role => {\n    var _state$user;\n    return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.role) === role;\n  };\n\n  // Check if user has any of the specified roles\n  const hasAnyRole = roles => {\n    var _state$user2;\n    return roles.includes((_state$user2 = state.user) === null || _state$user2 === void 0 ? void 0 : _state$user2.role);\n  };\n\n  // Context value\n  const value = {\n    // State\n    user: state.user,\n    loading: state.loading,\n    error: state.error,\n    isAuthenticated: state.isAuthenticated,\n    // Actions\n    login,\n    register,\n    logout,\n    updateUser,\n    clearError,\n    refreshToken,\n    getAccessToken,\n    // Utilities\n    hasRole,\n    hasAnyRole\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","toast","jsxDEV","_jsxDEV","initialState","user","loading","error","isAuthenticated","ActionTypes","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","SET_LOADING","CLEAR_ERROR","UPDATE_USER","authReducer","state","action","type","payload","AuthContext","useAuth","_s","context","Error","TOKEN_KEY","REFRESH_TOKEN_KEY","USER_KEY","getStoredTokens","accessToken","localStorage","getItem","refreshToken","JSON","parse","setStoredTokens","setItem","stringify","clearStoredTokens","removeItem","AuthProvider","children","_s2","dispatch","initializeAuth","currentUser","getCurrentUser","refreshResponse","access_token","refreshError","console","login","email","password","response","refresh_token","success","_error$response","_error$response$data","errorMessage","data","detail","register","userData","_error$response2","_error$response2$data","logout","updateUser","updatedUser","clearError","storedRefreshToken","getAccessToken","hasRole","role","_state$user","hasAnyRole","roles","_state$user2","includes","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport toast from 'react-hot-toast';\n\n// Initial state\nconst initialState = {\n  user: null,\n  loading: true,\n  error: null,\n  isAuthenticated: false,\n};\n\n// Action types\nconst ActionTypes = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  LOGOUT: 'LOGOUT',\n  SET_LOADING: 'SET_LOADING',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER',\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.LOGIN_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case ActionTypes.LOGIN_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        user: action.payload.user,\n        isAuthenticated: true,\n        error: null,\n      };\n    case ActionTypes.LOGIN_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        user: null,\n        isAuthenticated: false,\n        error: action.payload,\n      };\n    case ActionTypes.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        loading: false,\n        error: null,\n      };\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    case ActionTypes.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null,\n      };\n    case ActionTypes.UPDATE_USER:\n      return {\n        ...state,\n        user: { ...state.user, ...action.payload },\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = createContext();\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Token management\nconst TOKEN_KEY = 'afms_access_token';\nconst REFRESH_TOKEN_KEY = 'afms_refresh_token';\nconst USER_KEY = 'afms_user';\n\nconst getStoredTokens = () => {\n  return {\n    accessToken: localStorage.getItem(TOKEN_KEY),\n    refreshToken: localStorage.getItem(REFRESH_TOKEN_KEY),\n    user: JSON.parse(localStorage.getItem(USER_KEY) || 'null'),\n  };\n};\n\nconst setStoredTokens = (accessToken, refreshToken, user) => {\n  if (accessToken) localStorage.setItem(TOKEN_KEY, accessToken);\n  if (refreshToken) localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n  if (user) localStorage.setItem(USER_KEY, JSON.stringify(user));\n};\n\nconst clearStoredTokens = () => {\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(REFRESH_TOKEN_KEY);\n  localStorage.removeItem(USER_KEY);\n};\n\n// Auth Provider Component\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const initializeAuth = async () => {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n\n      try {\n        const { accessToken, refreshToken, user } = getStoredTokens();\n\n        if (accessToken && refreshToken && user) {\n          // Verify token is still valid by fetching user info\n          try {\n            const currentUser = await authAPI.getCurrentUser();\n            dispatch({\n              type: ActionTypes.LOGIN_SUCCESS,\n              payload: { user: currentUser },\n            });\n          } catch (error) {\n            // Token might be expired, try to refresh\n            try {\n              const refreshResponse = await authAPI.refreshToken(refreshToken);\n              setStoredTokens(refreshResponse.access_token, refreshToken, user);\n              \n              const currentUser = await authAPI.getCurrentUser();\n              dispatch({\n                type: ActionTypes.LOGIN_SUCCESS,\n                payload: { user: currentUser },\n              });\n            } catch (refreshError) {\n              // Refresh failed, clear tokens and logout\n              clearStoredTokens();\n              dispatch({ type: ActionTypes.LOGOUT });\n            }\n          }\n        } else {\n          dispatch({ type: ActionTypes.SET_LOADING, payload: false });\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        clearStoredTokens();\n        dispatch({ type: ActionTypes.SET_LOADING, payload: false });\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    dispatch({ type: ActionTypes.LOGIN_START });\n\n    try {\n      const response = await authAPI.login(email, password);\n      \n      setStoredTokens(\n        response.access_token,\n        response.refresh_token,\n        response.user\n      );\n\n      dispatch({\n        type: ActionTypes.LOGIN_SUCCESS,\n        payload: { user: response.user },\n      });\n\n      toast.success('Login successful!');\n      return { success: true };\n    } catch (error) {\n      const errorMessage = error.response?.data?.detail || 'Login failed';\n      dispatch({\n        type: ActionTypes.LOGIN_FAILURE,\n        payload: errorMessage,\n      });\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    dispatch({ type: ActionTypes.LOGIN_START });\n\n    try {\n      const response = await authAPI.register(userData);\n      \n      setStoredTokens(\n        response.access_token,\n        response.refresh_token,\n        response.user\n      );\n\n      dispatch({\n        type: ActionTypes.LOGIN_SUCCESS,\n        payload: { user: response.user },\n      });\n\n      toast.success('Registration successful!');\n      return { success: true };\n    } catch (error) {\n      const errorMessage = error.response?.data?.detail || 'Registration failed';\n      dispatch({\n        type: ActionTypes.LOGIN_FAILURE,\n        payload: errorMessage,\n      });\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      console.error('Logout API error:', error);\n    } finally {\n      clearStoredTokens();\n      dispatch({ type: ActionTypes.LOGOUT });\n      toast.success('Logged out successfully');\n    }\n  };\n\n  // Update user function\n  const updateUser = (userData) => {\n    const updatedUser = { ...state.user, ...userData };\n    localStorage.setItem(USER_KEY, JSON.stringify(updatedUser));\n    dispatch({\n      type: ActionTypes.UPDATE_USER,\n      payload: userData,\n    });\n  };\n\n  // Clear error function\n  const clearError = () => {\n    dispatch({ type: ActionTypes.CLEAR_ERROR });\n  };\n\n  // Refresh token function\n  const refreshToken = async () => {\n    try {\n      const { refreshToken: storedRefreshToken } = getStoredTokens();\n      if (!storedRefreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      const response = await authAPI.refreshToken(storedRefreshToken);\n      setStoredTokens(response.access_token, storedRefreshToken, state.user);\n      \n      return response.access_token;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      logout();\n      throw error;\n    }\n  };\n\n  // Get current access token\n  const getAccessToken = () => {\n    return localStorage.getItem(TOKEN_KEY);\n  };\n\n  // Check if user has specific role\n  const hasRole = (role) => {\n    return state.user?.role === role;\n  };\n\n  // Check if user has any of the specified roles\n  const hasAnyRole = (roles) => {\n    return roles.includes(state.user?.role);\n  };\n\n  // Context value\n  const value = {\n    // State\n    user: state.user,\n    loading: state.loading,\n    error: state.error,\n    isAuthenticated: state.isAuthenticated,\n\n    // Actions\n    login,\n    register,\n    logout,\n    updateUser,\n    clearError,\n    refreshToken,\n    getAccessToken,\n\n    // Utilities\n    hasRole,\n    hasAnyRole,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}